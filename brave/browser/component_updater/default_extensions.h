// Copyright 2016 Brave authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef BRAVE_BROWSER_COMPONENT_UPDATER_DEFAULT_EXTENSIONS_H_
#define BRAVE_BROWSER_COMPONENT_UPDATER_DEFAULT_EXTENSIONS_H_

#include <string>

// The SHA256 of the SubjectPublicKeyInfo used to sign the extension.
// PublicKeySHA256 can be generated by first downloading the CRX with
// one of the URLs below.  Then using:
// ./script/get-extension-public-key-sha256.py <crx_path>

// Registers a component which either already exists or not for updates
// require('electron').remote..componentUpdater.registerComponent(extensionId) // NOLINT
//
// Removes any existing extension and performs an install now.
// componentUpdater.registerComponent must have been called.
// require('electron').remote..componentUpdater.checkNow(extensionId) // NOLINT

// 1Password
// Download: https://clients2.google.com/service/update2/crx?response=redirect&prodversion=52.0.2743.116&x=id%3Daomjjhallfgjeglblehebfpbcfeobpgk%26uc // NOLINT
const uint8_t kOnePasswordPublicKey[162] = {
  0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81,
  0x89, 0x02, 0x81, 0x81, 0x00, 0x81, 0xe0, 0xc7,
  0xf4, 0xc5, 0x60, 0xea, 0xb2, 0xda, 0x6d, 0x66,
  0x1e, 0xe0, 0xaa, 0x87, 0x07, 0x2f, 0xe4, 0x53,
  0xdf, 0xa6, 0x49, 0xa3, 0xf8, 0x89, 0xd2, 0x46,
  0x66, 0x2f, 0x20, 0xbc, 0xbf, 0x10, 0xac, 0x19,
  0x2d, 0xba, 0x2e, 0x88, 0x9d, 0xb7, 0xaf, 0x4a,
  0x3c, 0x15, 0x65, 0x7e, 0xe0, 0x48, 0xd0, 0x56,
  0x96, 0x2f, 0x6e, 0x4d, 0x54, 0x1d, 0xac, 0x55,
  0xd8, 0xfb, 0xc0, 0xdb, 0x02, 0xbd, 0x02, 0x27,
  0xec, 0x89, 0x90, 0xc1, 0x20, 0x79, 0x02, 0xe7,
  0x6a, 0xd8, 0x1d, 0xee, 0x43, 0x39, 0x3b, 0xd1,
  0x10, 0x3b, 0x4a, 0x61, 0x84, 0xf6, 0x77, 0x48,
  0x2a, 0xc2, 0xac, 0xe0, 0xbd, 0x7d, 0x9f, 0xc6,
  0xaf, 0x86, 0x0e, 0x28, 0x85, 0xe8, 0xf2, 0x06,
  0x22, 0x39, 0x9e, 0xb5, 0x1e, 0x82, 0xcf, 0x78,
  0x8b, 0x4b, 0x4c, 0xa4, 0x55, 0x5e, 0x79, 0xd9,
  0x93, 0x38, 0xee, 0x3e, 0x79, 0x02, 0x03, 0x01,
  0x00, 0x01
};
const std::string kOnePasswordPublicKeyStr(
    (const char *)kOnePasswordPublicKey, sizeof(kOnePasswordPublicKey));
const std::string kOnePasswordId("aomjjhallfgjeglblehebfpbcfeobpgk");

// PDFJS
// Download: https://clients2.google.com/service/update2/crx?response=redirect&prodversion=52.0.2743.116&x=id%3Doemmndcbldboiebfnladdacbdfmadadm%26uc // NOLINT
const uint8_t kPDFJSPublicKey[162] = {
  0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81,
  0x89, 0x02, 0x81, 0x81, 0x00, 0xdb, 0xe4, 0xf2,
  0x1b, 0xf1, 0xac, 0x8a, 0xea, 0xf1, 0xef, 0x10,
  0x86, 0x35, 0x9c, 0x92, 0x91, 0x48, 0x20, 0xc4,
  0xf2, 0x22, 0x75, 0x4f, 0x8d, 0xea, 0x14, 0xdf,
  0xb9, 0x76, 0xf0, 0x95, 0x42, 0xb9, 0xb2, 0x12,
  0x48, 0x2a, 0x07, 0xd6, 0x6e, 0x64, 0xd4, 0xf6,
  0xe0, 0xbc, 0x28, 0xb7, 0xde, 0x87, 0x57, 0x9d,
  0x55, 0xa0, 0x84, 0xc7, 0x29, 0x13, 0x48, 0x54,
  0xa2, 0x36, 0x36, 0xb6, 0xdf, 0x9f, 0x43, 0x38,
  0xf6, 0xde, 0xea, 0xb5, 0xa3, 0xf7, 0xe2, 0x0f,
  0xc6, 0x5c, 0x9e, 0xe6, 0x00, 0x86, 0xd2, 0xce,
  0xc6, 0x38, 0xfa, 0x2f, 0x96, 0xb3, 0x3f, 0x04,
  0x2f, 0x64, 0x8d, 0x10, 0x8c, 0x3a, 0xb8, 0x7f,
  0x11, 0x99, 0x71, 0xbb, 0x9d, 0x9d, 0xbd, 0x34,
  0x9e, 0xec, 0x93, 0xb8, 0xe7, 0xd7, 0xb4, 0x26,
  0x32, 0xc3, 0xb6, 0x50, 0x9d, 0x35, 0x51, 0x3f,
  0x21, 0x7c, 0xe3, 0x8e, 0x11, 0x02, 0x03, 0x01,
  0x00, 0x01
};
const std::string kPDFJSPublicKeyStr(
    (const char *)kPDFJSPublicKey, sizeof(kPDFJSPublicKey));
const std::string kPDFJSId("oemmndcbldboiebfnladdacbdfmadadm");

// Dashlane
// Download: https://clients2.google.com/service/update2/crx?response=redirect&prodversion=52.0.2743.116&x=id%3Dfdjamakpfbbddfjaooikfcpapjohcfmg%26uc // NOLINT
const uint8_t kDashlanePublicKey[294] = {
  0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
  0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
  0x00, 0xad, 0xff, 0x8c, 0x6f, 0x4a, 0xe8, 0xe3,
  0x56, 0xc9, 0xf8, 0x55, 0x11, 0x22, 0x1a, 0x7b,
  0x62, 0x1c, 0x13, 0xc9, 0xa3, 0xf5, 0x51, 0xb2,
  0x58, 0xda, 0x93, 0x00, 0xa5, 0x81, 0x53, 0x9e,
  0x5d, 0x45, 0xfb, 0xe6, 0xd6, 0xeb, 0x96, 0x5f,
  0xf3, 0x4a, 0x70, 0x21, 0x11, 0x6d, 0xe1, 0xbe,
  0x95, 0x51, 0x0e, 0xea, 0xb7, 0x79, 0x0d, 0x13,
  0x75, 0xd6, 0xac, 0xde, 0x55, 0x52, 0x96, 0xce,
  0xe6, 0x96, 0xac, 0x41, 0x92, 0xe4, 0xe1, 0xcc,
  0xda, 0x10, 0x9c, 0xc5, 0x04, 0x63, 0xec, 0xc4,
  0x57, 0xde, 0xf3, 0xd8, 0x2e, 0x5d, 0xbd, 0x97,
  0x77, 0xa0, 0x86, 0x00, 0x7a, 0x5f, 0x76, 0x7f,
  0xb0, 0x3c, 0x85, 0x3c, 0x84, 0xc8, 0x9e, 0xd1,
  0xa8, 0xe8, 0x52, 0xa2, 0x02, 0xf9, 0x85, 0xa3,
  0x11, 0x92, 0x74, 0xbd, 0xfd, 0xe5, 0x3f, 0x4a,
  0xfd, 0x12, 0x91, 0x1b, 0x3d, 0x44, 0x82, 0x76,
  0x0d, 0x52, 0x8e, 0xf2, 0xdb, 0xfc, 0xdc, 0xcd,
  0xce, 0xad, 0xa1, 0xfc, 0x47, 0xaf, 0xfc, 0x17,
  0xdc, 0xac, 0x46, 0x7b, 0x7b, 0x7c, 0x04, 0x6f,
  0xd3, 0x60, 0x33, 0x6f, 0xe9, 0x74, 0xfd, 0xad,
  0x7e, 0x8c, 0x26, 0x06, 0x0e, 0xb1, 0x2e, 0xea,
  0x22, 0x53, 0x3d, 0x93, 0x69, 0x06, 0xd3, 0x56,
  0x80, 0x51, 0x82, 0x69, 0x29, 0x8a, 0x4d, 0xe0,
  0xcb, 0x82, 0xa8, 0x8c, 0x56, 0x87, 0x81, 0xd8,
  0x9d, 0x4f, 0xb0, 0x15, 0x18, 0x8a, 0x66, 0x1d,
  0x9c, 0x9c, 0x11, 0xde, 0x3d, 0xd4, 0x4f, 0x4c,
  0x1b, 0xf9, 0x87, 0xb9, 0x0d, 0x27, 0x59, 0x90,
  0xfd, 0xa4, 0x93, 0xa9, 0xf6, 0x7d, 0x5d, 0x04,
  0x70, 0x38, 0x2c, 0x0a, 0xb9, 0x5b, 0x15, 0x3a,
  0x7f, 0xf2, 0xbe, 0x87, 0xea, 0xa1, 0x7a, 0x45,
  0x8e, 0xec, 0xa5, 0x4a, 0xd0, 0xcd, 0xff, 0x9b,
  0x0c, 0x71, 0x1a, 0x18, 0xb3, 0x3d, 0xb8, 0xe9,
  0x25, 0x02, 0x03, 0x01, 0x00, 0x01
};
const std::string kDashlanePublicKeyStr(
    (const char *)kDashlanePublicKey, sizeof(kDashlanePublicKey));
const std::string kDashlaneId("fdjamakpfbbddfjaooikfcpapjohcfmg");

// LastPass
// Download: https://clients2.google.com/service/update2/crx?response=redirect&prodversion=52.0.2743.116&x=id%3Dhdokiejnpimakedhajhdlcegeplioahd%26uc // NOLINT
const uint8_t kLastPassPublicKey[162] = {
  0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81,
  0x89, 0x02, 0x81, 0x81, 0x00, 0xa2, 0x2f, 0xdc,
  0xb6, 0x8f, 0x38, 0x8a, 0xa7, 0x99, 0x23, 0x6f,
  0x5d, 0xee, 0x60, 0x6d, 0x5b, 0x01, 0x7b, 0x2e,
  0x7a, 0x65, 0x0a, 0x01, 0x85, 0x00, 0xc1, 0x1f,
  0xcd, 0xf6, 0xa4, 0xee, 0x84, 0xc2, 0x2e, 0x97,
  0x2d, 0x36, 0x11, 0xc9, 0xba, 0xdd, 0xd3, 0xa4,
  0x9f, 0xe3, 0x36, 0xaf, 0x6e, 0x88, 0x19, 0xf0,
  0xc4, 0xfe, 0x56, 0xcf, 0xbf, 0xf7, 0x41, 0xfd,
  0x6f, 0x9d, 0xdf, 0x8a, 0x6a, 0x1a, 0x8e, 0x6e,
  0x24, 0x96, 0x3e, 0x3a, 0x6b, 0x7d, 0xb7, 0x7c,
  0x6c, 0x22, 0xec, 0xfb, 0x99, 0x0c, 0x2e, 0xbc,
  0x5d, 0x47, 0xe6, 0x8c, 0xe3, 0xd0, 0xe1, 0xe8,
  0x93, 0x95, 0xc3, 0x15, 0x16, 0x81, 0x21, 0xf3,
  0xda, 0xd3, 0xa4, 0x61, 0x43, 0x0d, 0xcc, 0xee,
  0xc4, 0x99, 0x26, 0xf4, 0x3e, 0xaa, 0xa0, 0xf7,
  0xf9, 0xda, 0xf4, 0x68, 0xb5, 0xfe, 0x9a, 0xf8,
  0xb4, 0x2d, 0x0d, 0x75, 0xb9, 0x02, 0x03, 0x01,
  0x00, 0x01
};
const std::string kLastPassPublicKeyStr(
    (const char *)kLastPassPublicKey, sizeof(kLastPassPublicKey));
const std::string kLastPassId("hdokiejnpimakedhajhdlcegeplioahd");

#endif  // BRAVE_BROWSER_COMPONENT_UPDATER_DEFAULT_EXTENSIONS_H_
